
#define _CRT_SECURE_NO_WARNINGS
#include <fstream>
#include <iostream>
#include <vector>
#include <cstring>

    using namespace std;

enum synthStatess { st, ard, aru, arl, arc, aro, aro1, aro2, are, end1, err }; // состояния синтаксического анализатора
enum lexStates { s, a, b, c, d, e, ar, g, i, cd, fa, fb, fc, fd, fe, far, fg, f }; // состояния лексического анализатора
const char* types[] = { "do", "id", "vl", "co", "ao", "eq", "wl", "wh", "lp" };


// структура 
struct  Lex
{
    char* wrd;
    const char* type;
    int synthtype;
};

// матрица состояний типов лексем
lexStates matrxlex[8][17] // матрица состояний
{
    a,   a,   g,   fa,  fa,  fa,  fa,  g,   i,   fa,  a, b,  c, d, e, ar, g,  // буквы
    b,   i,   b,   fb,  fb,  fb,  fb,  g,   i,   fb,  a, b,  c, d, e, ar, g,  // цифры
    fc,  fc,  fc,  fc,  fc,  fc,  fc,  fc,  fc,  fc,  a, b,  c, d, e, ar, g,  // <
    fd,  fd,  fd,  cd,  fd,  fd,  fd,  fd,  fd,  fd,  a, b,  c, d, e, ar, g,  // >
    fe,  fe,  fe,  cd,  cd,  fe,  fe,  fe,  fe,  fe,  a, b,  c, d, e, ar, g,  // =
    far, far, far, far, far, far, far, far, far, far, a, b,  c, d, e, ar, g,  // + и -
    s,   f,   f,   f,   f,   f,   f,   f,   f,   f,   a, b,  c, d, e, ar, g,  // символы выхода
    g,   g,   g,   fg,  fg,  fg,  fg,  g,   g,   fg,  a, b,  c, d, e, ar, g,  // мусор
};

// матрица для cинтаксического анализатора
const int matrxsynth[9][9]{
    {ard, err, err, err,  err, err,  err,  err,  err }, // do 
    {err, err, arl, aro1, aro, aro1, err,  are,  err},  // id
    {err, err, arl, err,  aro, err,  err,  are,  err }, // vl
    {err, err, err, arc,  err, err,  err,  err,  err},  // co
    {err, err, err, err,  err, err,  err,  err,  aro2}, // ao
    {err, err, err, arc,  err, err,  aro2, err,  err},  // eq
    {err, err, err, err,  err, err,  err,  err,  err},  // wl
    {err, aru, err, err,  err, err,  err,  err,  err},  // while
    {err, err, err, err,  err, err,  err,  err,  end1}, // loop
};


// является ли идентификатор ключевым словом?
bool checkKeyWord(char* lex)
{
    return (!strcmp(lex, "do") || !strcmp(lex, "while") || !strcmp(lex, "loop")); // strcmp() возвращает 0 если строки равны
};

// определяем тип лексемы
void CheckType(lexStates states, Lex & lex) // получаем тип лексемы по состоянию 
{
    if (states == lexStates::i) {
        size_t size = strlen(lex.wrd); // 
        if (size > 5)
        {
            lex.type = types[6];
            lex.synthtype = 6;
        }
        else
        {
            lex.type = types[1];
            lex.synthtype = 1;
        }
    }
    else
    {
        if (states == lexStates::a) // если лексема только из букв
        {
            if (checkKeyWord(lex.wrd)) // если это ключевое слово
            {
                if (!strcmp(lex.wrd, "do")) { lex.type = types[0];  lex.synthtype = 0; }
                if (!strcmp(lex.wrd, "while")) { lex.type = types[7];  lex.synthtype = 7; }
                if (!strcmp(lex.wrd, "loop")) { lex.type = types[8];  lex.synthtype = 8; }
            }
            else { // если нет - это может быть или идентификатор, или мусор, если его длина >5
                size_t size = strlen(lex.wrd);
                if (size > 5)
                {
                    lex.type = types[6]; // мусор
                    lex.synthtype = 6;
                }
                else
                {
                    lex.type = types[1]; // идентификатор
                    lex.synthtype = 1;
                }
            }
        }
        else if (states == lexStates::b) // если только цифры
        {
            if (atoi(lex.wrd) > 32768 || atoi(lex.wrd) < -32767)
            {
                lex.synthtype = 6;
                lex.type = types[6];
            }
            else
            {
                lex.type = types[2];
                lex.synthtype = 2;
            }
        }
        else if (states == lexStates::c) // если <
        {
            lex.type = types[3];
            lex.synthtype = 3;
        }
        else if (states == lexStates::d) // если >
        {
            lex.type = types[3];
            lex.synthtype = 3;
        }
        else if (states == lexStates::e) // если =
        {
            lex.type = types[5];
            lex.synthtype = 5;
        }
        else if (states == lexStates::ar) // если + или -
        {
            lex.type = types[4];
            lex.synthtype = 4;
        }
        else if (states == lexStates::cd) // если <> <= >=
        {
            lex.type = types[3];
            lex.synthtype = 3;
        }
        else if (states == lexStates::g) // если мусор
        {
            lex.type = types[6];
            lex.synthtype = 6;
        }
    }
}

// сохрание лексемы 
void saveLex(int cur, int& first, vector<Lex>&res, char*& text, lexStates states)
{
    Lex lex;
    int leng = cur - first; // длина слова
    lex.wrd = new char[leng + 1]; // выделение места для слова
    strncpy(&lex.wrd[0], &text[0] + first, leng); // копирование слово
    lex.wrd[leng] = '\0'; // закрывающий символ
    CheckType(states, lex);
    res.push_back(lex);
    first = cur;
}

//глобальный файл для вывода
ofstream outputting("output.txt");

// лексический анализатор 
void lexAn(char* text, vector <Lex>&res) // лексический анализатор
{
    int curPos = 0; // текущая позиция
    lexStates states = lexStates::s; // изначальное состояние
    lexStates prevState;
    int size = strlen(text);
    int firstPos;
    int end = size + 1;

    while (curPos != end)
    {
        prevState = states;
        char currChar = text[curPos];

        if (states == lexStates::s && currChar != ' ' && currChar != '\t' && currChar != '\n' && currChar != '\r' && currChar != '\0') firstPos = curPos;

        // обновляем состояния
        if (isalpha(currChar)) states = matrxlex[0][states];
        else if (isdigit(currChar)) states = matrxlex[1][states];
        else if (currChar == '<') states = matrxlex[2][states];
        else if (currChar == '>') states = matrxlex[3][states];
        else if (currChar == '=') states = matrxlex[4][states];
        else if (currChar == '+' || currChar == '-') states = matrxlex[5][states];
        else if (currChar == ' ' || currChar == '\t' || currChar == '\n' || currChar == '\r' || currChar == '\0') states = matrxlex[6][states];
        else states = matrxlex[7][states];

        if (states == f)
        {
            saveLex(curPos, firstPos, res, text, prevState);
            states = lexStates::s;
        }
        // запись предшествующей лексемы
        if (states == c || states == d || states == e || states == ar) saveLex(curPos, firstPos, res, text, prevState);

        else if (states == fa || states == fb || states == fc || states == fd || states == fe || states == far || states == fg) // выходы с обозначением следующего состояния
        {
            if (prevState != s) saveLex(curPos, firstPos, res, text, prevState);
            states = matrxlex[0][states];
        }
        ++curPos;
    }
}

// функция обработки минуса
void separateMinus(vector<Lex>&minus)
{
    for (size_t i = 0; i < minus.size(); ++i)
    {
        if (!strcmp(minus[i].wrd, "-") && i + 1 < minus.size() && (minus[i + 1].synthtype == 2) && i)
        {
            if (minus[i - 1].synthtype == 7 || minus[i - 1].synthtype == 3 || minus[i - 1].synthtype == 5)
            {
                Lex lex;
                lex.wrd = new char[sizeof(minus[i + 1]) + 1];
                lex.wrd[0] = '-';
                strncpy(&lex.wrd[1], minus[i + 1].wrd, sizeof(minus[i + 1]));
                minus[i].type = types[minus[i + 1].synthtype];
                minus[i].synthtype = minus[i + 1].synthtype;
                minus[i].wrd = lex.wrd;
                for (size_t j = i + 1; j < minus.size() - 1; ++j)
                {
                    minus[j] = minus[j + 1];
                    minus[j].type = types[minus[j + 1].synthtype];
                    minus[j].synthtype = minus[j + 1].synthtype;
                }
                minus.pop_back();
            }
        }

    }
}

// вывод ошибки
void printSynthError(int states)
{
    int* arrayOfTypes;
    int m = 0, n = 0;
    for (int i = 0; i < 9; ++i)
        if (matrxsynth[i][states] != err)
            ++m; // количество правильных вариантов
    arrayOfTypes = new int[m]; // массив с найденым размером
    for (int i = 0; i < 9; ++i) //правильные состояния сохраняется в массив
    {
        if (matrxsynth[i][states] != err)
        {
            arrayOfTypes[n] = i;
            ++n; // проход по массиву
        }
    }
    if (arrayOfTypes[0] == 1 && arrayOfTypes[1] == 3 && arrayOfTypes[2] == 5) { swap(arrayOfTypes[0], arrayOfTypes[1]); swap(arrayOfTypes[1], arrayOfTypes[2]); }
    for (int i = 0; i < m; ++i)
        outputting << types[arrayOfTypes[i]] << " "; // выводим типы в соответствии с номером
    delete[] arrayOfTypes;
}

// синтаксический анализатор
void synAn(vector<Lex>&sy)
{
    int curStates = st, prevState; // текущее и предыдущее состояние
    for (size_t i = 0; i < sy.size(); ++i)  // начинаем пробор по вектору лексем
    {
        if (curStates != err) // после ошибки завершение
        {
            prevState = curStates; // сохраняем предыдущее состояние
            curStates = matrxsynth[sy[i].synthtype][curStates]; // ставим новое
            if (curStates == end1)
            {
                if (i != sy.size() - 1) curStates = s; // если ещё есть конструкия, идём дальше
                else outputting << "OK"; // если все хорошо, выводим ОК
            }
            else if ((i == sy.size() - 1 && curStates != end1) || (curStates == err)) // конструкция правильная но не дошла до конца или есть ошибка
            {
                curStates == err ? outputting << i << " " : outputting << i + 1 << " "; // выводим место ошибки 
                if (curStates == err) printSynthError(prevState); //функция поиска нужных типов
                else printSynthError(curStates);
            }
        }
    }
}

// вывод результата работы
void printLexResult(vector<Lex>&res)
{
    size_t j = res.size();
    for (size_t i = 0; i < j; ++i) outputting << res[i].wrd << '[' << res[i].type << "] ";
    outputting << endl;
}

int main()
{
    ifstream inputting("input.txt");
    int size = 0;
    inputting.seekg(0, ios::end); // находим количество символов
    size = inputting.tellg();
    inputting.seekg(0, ios::beg);
    if (size)
    {
        char* text = new char[size + 1]; // создаем массив
        inputting.read(&text[0], size + 1); // считываем данные
        text[size] = '\0'; // ставим \0 в конец чтобы был условный конец файла
        inputting.close(); // закрываем входной файл

        vector <Lex> result;
        lexAn(text, result); //лексический анализ
        separateMinus(result);
        printLexResult(result);
        synAn(result);


        for (size_t i = 0; i < result.size(); ++i) delete[] result[i].wrd; //очистка памяти
        delete[] text;
    }
    else outputting << "0 do";
    outputting.close();
    return 0;
}
